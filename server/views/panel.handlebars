<html>

<head>
    <title>Chaos-LED's</title>
</head>

<body>
    <script src="/js/socket.io.min.js"></script>
    <script src="/js/jscolor.min.js"></script>
    <link rel="stylesheet" href="css/colorpicker.css" type="text/css" />
    <link rel="stylesheet" media="screen" type="text/css" href="css/layout.css" />
    <script type="text/javascript" src="js/jquery.js"></script>
    <script type="text/javascript" src="js/colorpicker.js"></script>
    <script type="text/javascript" src="js/eye.js"></script>
    <script type="text/javascript" src="js/utils.js"></script>
    <script type="text/javascript" src="js/layout.js?ver=1.0.2"></script>

    <script>
        var socket = io();
        var controlling = false;
        var afk = false;
        var waitingTime = 0;
        const checkupTime = 1000;

        var r = 100;
        var g = 100;
        var b = 100;

        //join server as user
        socket.emit('user', {});
    </script>
    <div id="background">
        <!-- displays controller status/ remaining waiting time -->
        <div id="controlInfo">No connection to Host</div>

        <link rel="stylesheet" media="screen" type="text/css" href="css/colorpicker.css" />
        <script type="text/javascript" src="js/colorpicker.js"></script>

        <!-- colorpicker -->
        <p id="colorpickerHolder"></p>
        <!-- reconnect button -->
        <div id="reconnect" style="display:none;">
            <input id="reconnectButton" type="button" value="Verbindung wiederherstellen">
        </div>
        <!--
    <input class="controlElement" type="button" value="Fade" onclick="socket.emit('function', {'function' : 'fade', 'color' : {'r' : r, 'g' : g, 'b' : b}});">
    <input class="controlElement" type="button" value="Blink" onclick="socket.emit('function', {'function' : 'blink', 'color' : {'r' : r, 'g' : g, 'b' : b}});">
  -->
    </div>
    <script>
        //add colorpicker
        $('#colorpickerHolder').ColorPicker({
            flat: true,
            onChange: function(hsb, hex, rgb) {
                if (controlling) {
                    //emit color
                    setColor(rgb);

                    //change local color variables
                    r = rgb.r;
                    g = rgb.g;
                    b = rgb.b;

                    //change backgroundcolor according to new color
                    $('.colorpicker').css('box-shadow', '0px 0px 100px 40px rgb(' + r + ', ' + g + ', ' + b + ')');
                } else {
                    //return color to last value (dont change it)
                    $('#colorpickerHolder').ColorPickerSetColor({
                        "r": r,
                        "g": g,
                        "b": b
                    });
                }
            }
        });

        var controlElements = document.getElementsByClassName('controlElement');

        var controlInfo = document.getElementById('controlInfo');

        var setColor = function(rgb) {
            socket.emit('color', {
                'r': rgb.r,
                'g': rgb.g,
                'b': rgb.b
            });
        }

        var toggleControlElements = function(control) {
            controlElements.disabled = !control;
        }

        //toggle sliders initially
        toggleControlElements(controlling);

        //set intial slider values
        socket.on('initialize', function(msg) {
            r = msg.r;
            g = msg.g;
            b = msg.b;

            $('#colorpickerHolder').ColorPickerSetColor({
                "r": r,
                "g": g,
                "b": b
            });

            //change backgroundcolor according to new color
            $('.colorpicker').css('box-shadow', '0px 0px 100px 40px rgb(' + r + ', ' + g + ', ' + b + ')');
        });

        //lock sliders if user is not in control
        socket.on('controlling', function(msg) {
            //console.dir(msg);
            controlling = msg.control;
            afk = msg.afk === true ? true : false;

            //toggle sliders
            toggleControlElements(controlling);

            //set control info
            if (controlling) {
                controlInfo.textContent = "Du kontrollierst die Chaos-Leds! Tob dich aus!";
            } else if (!controlling && afk !== true) {
                //check if waiting time is still correct, if not, change it
                if (waitingTime !== msg.waitingTime && msg.waitingTime != "NaN") {
                    waitingTime = Math.floor(msg.waitingTime / 1000);
                }
            } else if (afk) {
                controlInfo.textContent = "Du hast zu lange keine Eingabe gemacht! DrÃ¼cke auf den Knopf, um dich wieder zu verbinden.";

                //disconnect from socket
                socket.disconnect();

                //display reconnect button
                $('#reconnect').css("display", "block");

            }
        });

        //transmit slider values if user is controlling
        socket.on('color', function(msg) {
            $('#colorpickerHolder').ColorPickerSetColor(msg);

            r = msg.r;
            g = msg.g;
            b = msg.b;

            //change backgroundcolor according to new color
            $('.colorpicker').css('box-shadow', '0px 0px 100px 40px rgb(' + r + ', ' + g + ', ' + b + ')');
        });

        //if client is not controlling, periodically check if control has been given to client
        var controllerCheck = function() {
            if (!controlling && afk === false) {
                //console.log("Checking for Controller change...");
                socket.emit('controllercheck', {});
            }
            setTimeout(
                controllerCheck, checkupTime);
        }

        controllerCheck();

        //set waiting timer
        var waitingTimer = function() {
            if (!controlling && afk === false) {
                controlInfo.textContent = waitingTime + " Sekunden, bis du Led-Meister wirst!";

                if (waitingTime > 0)
                    --waitingTime;
            }
            setTimeout(waitingTimer, 1000);
        }

        waitingTimer();

        //add event listener to reconnect button
        $('#reconnectButton').click(function() {
            //console.log("Reconnecting...");
            //connect to server
            socket.connect({
                "forceNew": true
            });

            //join server as user
            socket.emit('role', {role: "user"});

            afk = false;

            //hide reconnect button
            $('#reconnect').css("display", "none");
        });
    </script>
</body>

</html>
