<html>

<body>
    <script src="/js/socket.io.min.js"></script>
    <script src="/js/jscolor.min.js"></script>
    <link rel="stylesheet" href="css/colorpicker.css" type="text/css" />
    <link rel="stylesheet" media="screen" type="text/css" href="css/layout.css" />
    <script type="text/javascript" src="js/jquery.js"></script>
    <script type="text/javascript" src="js/colorpicker.js"></script>
    <script type="text/javascript" src="js/eye.js"></script>
    <script type="text/javascript" src="js/utils.js"></script>
    <script type="text/javascript" src="js/layout.js?ver=1.0.2"></script>

    <script>
        var socket = io();
        var controlling = false;
        var waitingTime = 0;
        const checkupTime = 1000;

        var rgb = {
            'r': 0,
            'g': 0,
            'b': 0
        };
    </script>
    <div id="controlInfo">No connection to Host</div>

    <link rel="stylesheet" media="screen" type="text/css" href="css/colorpicker.css" />
    <script type="text/javascript" src="js/colorpicker.js"></script>

    <p id="colorpickerHolder" class="controlElement"></p>

    <input class="controlElement" type="button" value="Fade" onclick="socket.emit('function', {'function' : 'fade', 'rgb' : rgb});">
    <input class="controlElement" type="button" value="Blink" onclick="socket.emit('function', {'function' : 'blink',  'rgb' : rgb});">
    <script>
        //add colorpicker
        $('#colorpickerHolder').ColorPicker({
            flat: true,
            onChange: function(hsb, hex, rgbValues) {
                rgb = rgbValues;
                setColor(rgbValues);
            }
        });

        var controlElements = document.getElementsByClassName('controlElement');

        var controlInfo = document.getElementById('controlInfo');

        var setColor = function(rgb) {
            socket.emit('color', {
                'rgb': rgb
            });
        }

        var toggleControlElements = function(control) {
            controlElements.disabled = !control;
        }

        //toggle sliders initially
        toggleControlElements(controlling);

        //set intial slider values
        socket.on('initialize', function(msg) {
            console.log($('#colorpickerHolder').ColorPickerSetColor(msg));
        });

        //lock sliders if user is not in control
        socket.on('controlling', function(msg) {
            controlling = msg.control;
            toggleControlElements(controlling);

            //set control info
            if (controlling) {
                controlInfo.textContent = "Du kontrollierst die Chaos-Leds! Tob dich aus!";
            } else {
                //check if waiting time is still correct, if not, change it
                if (waitingTime !== msg.waitingTime && msg.waitingTime != "NaN") {
                    waitingTime = Math.floor(msg.waitingTime / 1000);
                }
            }
        });

        //transmit slider values if user is controlling
        socket.on('color', function(msg) {
            $('#colorpickerHolder').ColorPickerSetColor(msg);

            rgb = msg.rgb;
        });

        //if client is not controlling, periodically check if control has been given to client
        var controllerCheck = function() {
            if (!controlling) {
                console.log("Checking for Controller change...");
                socket.emit('controllercheck', {});
            }
            setTimeout(
                controllerCheck, checkupTime);
        }

        controllerCheck();

        //set waiting timer
        var waitingTimer = function() {
            if (!controlling) {
                controlInfo.textContent = waitingTime + " Sekunden, bis du Led-Meister wirst!";

                if (waitingTime > 0)
                    --waitingTime;
            }
            setTimeout(waitingTimer, 1000);
        }

        waitingTimer();
    </script>
</body>

</html>
